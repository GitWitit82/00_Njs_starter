// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  USER
  MANAGER
}

enum ProjectType {
  STANDARD
  VEHICLE_WRAP
  CUSTOM
  SIGN
  MURAL
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  BLOCKED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum FormType {
  STANDARD
  FORM
  CHECKLIST
  SURVEY
  INSPECTION
}

enum FormPriority {
  STANDARD
  CRITICAL
  OPTIONAL
}

enum FormInstanceStatus {
  DRAFT
  IN_PROGRESS
  SUBMITTED
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
  ARCHIVED
  PENDING_REVIEW
  ON_HOLD
}

enum FormStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  IN_REVIEW
  ACTIVE
  COMPLETED
  ARCHIVED
  PENDING_REVIEW
  ON_HOLD
}

enum ActivityType {
  COMMENT
  STATUS_CHANGE
  ASSIGNMENT
  PRIORITY_CHANGE
  SCHEDULE_CHANGE
  SCHEDULE_UPDATE
  ACTUAL_DATES_UPDATE
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DEPRECATED
}

enum DependencyType {
  FINISH_TO_START
  START_TO_START
  FINISH_TO_FINISH
  START_TO_FINISH
}

// Base Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                @id @default(cuid())
  name            String                @unique
  email           String?               @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  role            Role                  @default(USER)
  accounts        Account[]
  sessions        Session[]
  preferences     UserPreference?
  assignedTasks   ProjectTask[]
  departments     Department[]          @relation("UserDepartments")
  managedProjects Project[]             @relation("ProjectManagers")
  submittedForms  FormResponse[]        @relation("FormSubmissions")
  reviewedForms   FormResponse[]        @relation("FormReviews")
  createdVersions FormVersion[]
  responseHistory FormResponseHistory[]
  statusChanges   FormStatusHistory[]
  taskActivity    TaskActivity[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  theme     String   @default("light")
  language  String   @default("en")
  timezone  String   @default("UTC")
  settings  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  color         String         @default("#000000")
  users         User[]         @relation("UserDepartments")
  tasks         WorkflowTask[]
  projectTasks  ProjectTask[]
  formTemplates FormTemplate[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

// Workflow Models
model Workflow {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isTemplate    Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  phases        Phase[]
  projects      Project[]
  formTemplates FormTemplate[]
  status        WorkflowStatus @default(ACTIVE)
  metadata      Json?
  version       Int            @default(1)

  @@index([isTemplate])
}

model Phase {
  id                     String                      @id @default(cuid())
  name                   String
  description            String?
  order                  Int
  createdAt              DateTime                    @default(now())
  updatedAt              DateTime                    @updatedAt
  workflowId             String
  workflow               Workflow                    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks                  WorkflowTask[]
  formTemplates          FormTemplate[]
  projectPhases          ProjectPhase[]
  completionRequirements FormCompletionRequirement[]
  metadata               Json?
  estimatedDuration      Int?

  @@index([workflowId, order])
}

model WorkflowTask {
  id             String                   @id @default(cuid())
  name           String
  description    String?
  priority       Priority                 @default(MEDIUM)
  manHours       Float                    @default(1)
  order          Int
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  phaseId        String
  phase          Phase                    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  departmentId   String?
  department     Department?              @relation(fields: [departmentId], references: [id])
  projectTasks   ProjectTask[]            @relation("WorkflowTaskToProjectTask")
  dependencies   WorkflowTaskDependency[] @relation("DependentTasks")
  dependsOn      WorkflowTaskDependency[] @relation("RequiredTasks")
  formTemplateId String?
  formTemplate   FormTemplate?            @relation(fields: [formTemplateId], references: [id])
  metadata       Json?

  @@index([phaseId, order])
  @@index([formTemplateId])
}

model WorkflowTaskDependency {
  id            String         @id @default(cuid())
  taskId        String
  task          WorkflowTask   @relation("DependentTasks", fields: [taskId], references: [id])
  dependsOnId   String
  dependsOnTask WorkflowTask   @relation("RequiredTasks", fields: [dependsOnId], references: [id])
  type          DependencyType @default(FINISH_TO_START)

  @@unique([taskId, dependsOnId])
}

// Project Models
model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  projectType   ProjectType
  customerName  String
  vinNumber     String?
  status        ProjectStatus  @default(PLANNING)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowId    String
  workflow      Workflow       @relation(fields: [workflowId], references: [id])
  managerId     String
  manager       User           @relation("ProjectManagers", fields: [managerId], references: [id])
  phases        ProjectPhase[]
  formInstances FormInstance[]
  tasks         ProjectTask[]
  progress      Float          @default(0)
  metadata      Json?
  version       Int            @default(1)

  @@index([status])
  @@index([projectType])
}

model ProjectPhase {
  id          String        @id @default(cuid())
  name        String
  description String?
  order       Int
  status      PhaseStatus   @default(NOT_STARTED)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId     String
  phase       Phase         @relation(fields: [phaseId], references: [id])
  tasks       ProjectTask[] @relation("PhaseTasks")
  phaseTasks  ProjectTask[] @relation("TaskPhase")
}

model ProjectTask {
  id             String                  @id @default(cuid())
  name           String
  description    String?
  status         TaskStatus              @default(TODO)
  priority       Priority                @default(MEDIUM)
  manHours       Float                   @default(1)
  scheduledStart DateTime?
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  createdAt      DateTime                @default(now())
  updatedAt      DateTime                @updatedAt
  order          Int                     @default(0)
  progress       Float                   @default(0)
  delayReason    String?
  dependencies   ProjectTaskDependency[] @relation("DependentProjectTasks")
  dependsOn      ProjectTaskDependency[] @relation("RequiredProjectTasks")
  project        Project                 @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId      String
  phase          ProjectPhase            @relation("PhaseTasks", fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId        String
  projectPhaseId String
  projectPhase   ProjectPhase            @relation("TaskPhase", fields: [projectPhaseId], references: [id])
  assignedTo     User?                   @relation(fields: [assignedToId], references: [id])
  assignedToId   String?
  department     Department?             @relation(fields: [departmentId], references: [id])
  departmentId   String?
  taskActivities TaskActivity[]
  workflowTask   WorkflowTask?           @relation("WorkflowTaskToProjectTask", fields: [workflowTaskId], references: [id])
  workflowTaskId String?
  formInstances  FormInstance[]
  responses      FormResponse[]          @relation("TaskResponses")
  metadata       Json?

  @@index([projectId])
  @@index([phaseId])
  @@index([projectPhaseId])
  @@index([assignedToId])
  @@index([departmentId])
  @@index([workflowTaskId])
  @@index([status])
}

model ProjectTaskDependency {
  id            String         @id @default(cuid())
  taskId        String
  task          ProjectTask    @relation("DependentProjectTasks", fields: [taskId], references: [id])
  dependsOnId   String
  dependsOnTask ProjectTask    @relation("RequiredProjectTasks", fields: [dependsOnId], references: [id])
  type          DependencyType @default(FINISH_TO_START)

  @@unique([taskId, dependsOnId])
}

model TaskActivity {
  id        String       @id @default(cuid())
  taskId    String
  task      ProjectTask  @relation(fields: [taskId], references: [id])
  type      ActivityType
  content   String
  details   String?      // For backward compatibility
  metadata  Json?
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  createdAt DateTime     @default(now())

  @@index([taskId])
  @@index([userId])
}

// Form Models
model FormTemplate {
  id              String         @id @default(cuid())
  name            String
  description     String?
  type            FormType       @default(STANDARD)
  priority        FormPriority   @default(STANDARD)
  order           Int            @default(0)
  schema          Json?
  layout          Json?
  style           Json?
  metadata        Json?
  isActive        Boolean        @default(true)
  currentVersion  Int            @default(1)
  validationRules Json?
  defaultValues   Json?
  departmentId    String?
  department      Department?    @relation(fields: [departmentId], references: [id])
  workflowId      String
  workflow        Workflow       @relation(fields: [workflowId], references: [id])
  phaseId         String
  phase           Phase          @relation(fields: [phaseId], references: [id])
  versions        FormVersion[]
  instances       FormInstance[]
  responses       FormResponse[]
  tasks           WorkflowTask[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([departmentId])
  @@index([workflowId])
  @@index([phaseId])
}

model FormVersion {
  id          String         @id @default(cuid())
  version     Int
  templateId  String
  template    FormTemplate   @relation(fields: [templateId], references: [id])
  changelog   String?
  schema      Json
  layout      Json?
  style       Json?
  metadata    Json?
  createdById String
  createdBy   User           @relation(fields: [createdById], references: [id])
  createdAt   DateTime       @default(now())
  instances   FormInstance[]

  @@unique([templateId, version])
}

model FormInstance {
  id         String             @id @default(cuid())
  status     FormInstanceStatus @default(DRAFT)
  templateId String
  template   FormTemplate       @relation(fields: [templateId], references: [id])
  versionId  String
  version    FormVersion        @relation(fields: [versionId], references: [id])
  projectId  String?
  project    Project?           @relation(fields: [projectId], references: [id])
  taskId     String?
  task       ProjectTask?       @relation(fields: [taskId], references: [id])
  data       Json
  metadata   Json?
  responses  FormResponse[]
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt

  @@index([templateId])
  @@index([projectId])
  @@index([taskId])
}

model FormResponse {
  id            String                @id @default(cuid())
  instanceId    String
  instance      FormInstance          @relation(fields: [instanceId], references: [id])
  templateId    String
  template      FormTemplate          @relation(fields: [templateId], references: [id])
  data          Json
  status        FormStatus            @default(DRAFT)
  submittedById String
  submittedBy   User                  @relation("FormSubmissions", fields: [submittedById], references: [id])
  reviewedById  String?
  reviewedBy    User?                 @relation("FormReviews", fields: [reviewedById], references: [id])
  taskId        String?
  task          ProjectTask?          @relation("TaskResponses", fields: [taskId], references: [id])
  history       FormResponseHistory[]
  statusHistory FormStatusHistory[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@index([instanceId])
  @@index([templateId])
  @@index([submittedById])
  @@index([reviewedById])
  @@index([taskId])
}

model FormResponseHistory {
  id          String       @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id])
  data        Json
  changedById String
  changedBy   User         @relation(fields: [changedById], references: [id])
  createdAt   DateTime     @default(now())

  @@index([responseId])
}

model FormStatusHistory {
  id          String       @id @default(cuid())
  responseId  String
  response    FormResponse @relation(fields: [responseId], references: [id])
  status      FormStatus
  changedById String
  changedBy   User         @relation(fields: [changedById], references: [id])
  comment     String?
  createdAt   DateTime     @default(now())

  @@index([responseId])
}

model FormCompletionRequirement {
  id         String   @id @default(cuid())
  phaseId    String
  phase      Phase    @relation(fields: [phaseId], references: [id])
  formCount  Int      @default(1)
  isRequired Boolean  @default(true)
  metadata   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([phaseId])
}
