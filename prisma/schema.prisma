// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String                @id @default(cuid())
  name            String?               @unique
  email           String?               @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  role            Role                  @default(USER)
  accounts        Account[]
  sessions        Session[]
  preferences     UserPreference?
  assignedTasks   ProjectTask[]
  departments     Department[]          @relation("UserDepartments")
  managedProjects Project[]             @relation("ProjectManagers")
  submittedForms  FormResponse[]        @relation("FormSubmissions")
  reviewedForms   FormResponse[]        @relation("FormReviews")
  createdVersions FormVersion[] // Add relation for form versions
  responseHistory FormResponseHistory[] // Add relation for response history
  statusChanges   FormStatusHistory[]
  taskActivity  TaskActivity[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Workflow Template Models
model Workflow {
  id            String         @id @default(cuid())
  name          String
  description   String?
  isTemplate    Boolean        @default(true)  // Indicates if this is a template or instance
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  phases        Phase[]
  projects      Project[]      // Projects created from this workflow
  formTemplates FormTemplate[] // Forms associated with this workflow
  status        WorkflowStatus @default(ACTIVE)
  metadata      Json?          // Additional workflow metadata
  version       Int           @default(1)      // Version tracking

  @@index([isTemplate])
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  DEPRECATED
}

model Phase {
  id            String         @id @default(cuid())
  name          String
  description   String?
  order         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowId    String
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks         WorkflowTask[]
  formTemplates FormTemplate[]
  projectPhases ProjectPhase[] // Instances of this phase in projects
  completionRequirements FormCompletionRequirement[]
  metadata      Json?          // Additional phase metadata
  estimatedDuration Int?      // Estimated duration in days
  
  @@index([workflowId, order])
}

model WorkflowTask {
  id           String        @id @default(cuid())
  name         String
  description  String?
  priority     Priority      @default(MEDIUM)
  manHours     Float         @default(1)
  order        Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  phaseId      String
  phase        Phase         @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department?   @relation(fields: [departmentId], references: [id])
  projectTasks ProjectTask[] @relation("WorkflowTaskToProjectTask")
  dependencies WorkflowTaskDependency[] @relation("DependentTasks")
  dependsOn    WorkflowTaskDependency[] @relation("RequiredTasks")
  formTemplate FormTemplate? @relation(fields: [formTemplateId], references: [id])
  formTemplateId String?
  metadata     Json?         // Additional task metadata
  
  @@index([phaseId, order])
}

// New model for task dependencies
model WorkflowTaskDependency {
  id              String       @id @default(cuid())
  taskId          String      // The task that depends on another
  task            WorkflowTask @relation("DependentTasks", fields: [taskId], references: [id])
  dependsOnId     String      // The task that is required
  dependsOnTask   WorkflowTask @relation("RequiredTasks", fields: [dependsOnId], references: [id])
  type            DependencyType @default(FINISH_TO_START)
  
  @@unique([taskId, dependsOnId])
}

enum DependencyType {
  FINISH_TO_START    // Task can't start until dependency is finished
  START_TO_START     // Task can't start until dependency starts
  FINISH_TO_FINISH   // Task can't finish until dependency finishes
  START_TO_FINISH    // Task can't finish until dependency starts
}

// Project Implementation Models
model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  projectType   ProjectType
  customerName  String
  vinNumber     String?       // Only for vehicle wraps
  status        ProjectStatus  @default(PLANNING)
  startDate     DateTime
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowId    String
  workflow      Workflow       @relation(fields: [workflowId], references: [id])
  managerId     String
  manager       User           @relation("ProjectManagers", fields: [managerId], references: [id])
  phases        ProjectPhase[]
  formInstances FormInstance[] // Add relation for form instances
  tasks         ProjectTask[]
  progress      Float          @default(0)      // Overall progress (0-100)
  metadata      Json?          // Additional project metadata
  version       Int            @default(1)      // Version tracking
  
  @@index([status])
  @@index([projectType])
}

model ProjectPhase {
  id          String        @id @default(cuid())
  name        String
  description String?
  order       Int
  status      PhaseStatus   @default(NOT_STARTED)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  projectId   String
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId     String
  phase       Phase         @relation(fields: [phaseId], references: [id])
  tasks       ProjectTask[]
}

model ProjectTask {
  id              String      @id @default(cuid())
  name            String
  description     String?
  status          TaskStatus  @default(NOT_STARTED)
  priority        Priority    @default(MEDIUM)
  manHours        Float       @default(1)
  scheduledStart  DateTime?
  scheduledEnd    DateTime?
  actualStart     DateTime?
  actualEnd       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  order           Int         @default(0)
  progress        Float       @default(0)      // Task progress (0-100)
  delayReason     String?     // Reason for delay if any
  dependencies    ProjectTaskDependency[] @relation("DependentProjectTasks")
  dependsOn       ProjectTaskDependency[] @relation("RequiredProjectTasks")

  // Relations
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId       String
  phase           ProjectPhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  phaseId         String
  assignedTo      User?       @relation(fields: [assignedToId], references: [id])
  assignedToId    String?
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  taskActivities  TaskActivity[]
  workflowTask    WorkflowTask? @relation("WorkflowTaskToProjectTask", fields: [workflowTaskId], references: [id])
  workflowTaskId  String?
  formInstances   FormInstance[]
  responses       FormResponse[] @relation("TaskResponses")
  metadata        Json?         // Additional task metadata

  @@index([projectId])
  @@index([phaseId])
  @@index([assignedToId])
  @@index([departmentId])
  @@index([workflowTaskId])
  @@index([status])
}

// New model for project task dependencies
model ProjectTaskDependency {
  id              String       @id @default(cuid())
  taskId          String      // The task that depends on another
  task            ProjectTask @relation("DependentProjectTasks", fields: [taskId], references: [id])
  dependsOnId     String      // The task that is required
  dependsOnTask   ProjectTask @relation("RequiredProjectTasks", fields: [dependsOnId], references: [id])
  type            DependencyType @default(FINISH_TO_START)
  
  @@unique([taskId, dependsOnId])
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
  BLOCKED      // When dependencies are not met
  OVERDUE      // Past scheduled end date
}

model TaskActivity {
  id        String      @id @default(cuid())
  type      String      // STATUS_CHANGE, PRIORITY_CHANGE, COMMENT, etc.
  details   String
  createdAt DateTime    @default(now())

  // Relations
  task      ProjectTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId    String
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  @@index([taskId])
  @@index([userId])
}

// Form Management Models
model FormTemplate {
  id             String         @id @default(cuid())
  name           String
  description    String?
  type           FormType       @default(STANDARD)
  priority       FormPriority   @default(STANDARD)
  departmentId   String?
  department     Department?    @relation(fields: [departmentId], references: [id])
  workflowId     String
  workflow       Workflow       @relation(fields: [workflowId], references: [id])
  schema         Json           // Form structure/fields
  layout         Json?          // Optional layout configuration
  style          Json?          // Optional styling configuration
  metadata       Json?          // Additional metadata for custom forms
  order          Int            @default(0)
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  phaseId        String
  phase          Phase          @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  responses      FormResponse[] @relation("TemplateResponses")
  versions       FormVersion[]  @relation("TemplateVersions")
  currentVersion Int            @default(1)
  instances      FormInstance[] @relation("TemplateInstances")
  completionRequirements FormCompletionRequirement[]
  validationRules Json?         // Custom validation rules
  defaultValues   Json?         // Default field values
  
  @@index([workflowId])
  @@index([phaseId])
  @@index([departmentId])
}

model FormVersion {
  id          String         @id @default(cuid())
  version     Int
  templateId  String
  template    FormTemplate   @relation("TemplateVersions", fields: [templateId], references: [id], onDelete: Cascade)
  schema      Json // Form structure/fields for this version
  layout      Json? // Layout configuration for this version
  style       Json? // Styling configuration for this version
  metadata    Json? // Additional metadata for this version
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  createdById String
  createdBy   User           @relation(fields: [createdById], references: [id])
  changelog   String? // Description of changes in this version
  instances   FormInstance[] // Add relation for form instances

  @@unique([templateId, version])
}

model FormInstance {
  id             String             @id @default(cuid())
  templateId     String
  template       FormTemplate       @relation("TemplateInstances", fields: [templateId], references: [id])
  versionId      String            // Reference to specific version used
  version        FormVersion       @relation(fields: [versionId], references: [id])
  projectId      String?
  project        Project?          @relation(fields: [projectId], references: [id])
  taskId         String?
  task           ProjectTask?      @relation(fields: [taskId], references: [id])
  status         FormInstanceStatus @default(PENDING)
  data           Json?             // Current form data
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  responses      FormResponse[]    // Historical responses
  statusHistory  FormStatusHistory[]
  metadata       Json?             // Additional instance metadata
  
  @@index([templateId])
  @@index([projectId])
  @@index([taskId])
  @@index([status])
}

model FormResponse {
  id             String         @id @default(cuid())
  instanceId     String
  instance       FormInstance   @relation(fields: [instanceId], references: [id])
  templateId     String
  template       FormTemplate   @relation("TemplateResponses", fields: [templateId], references: [id])
  data           Json          // Response data
  status         FormStatus    @default(DRAFT)
  submittedById  String
  submittedBy    User          @relation("FormSubmissions", fields: [submittedById], references: [id])
  submittedAt    DateTime      @default(now())
  reviewedById   String?
  reviewedBy     User?         @relation("FormReviews", fields: [reviewedById], references: [id])
  reviewedAt     DateTime?
  comments       String?
  version        Int          // Version of form used
  taskId         String?      // Optional task association
  task           ProjectTask? @relation("TaskResponses", fields: [taskId], references: [id])
  history        FormResponseHistory[]
  metadata       Json?        // Additional response metadata
  
  @@index([instanceId])
  @@index([templateId])
  @@index([status])
}

model FormResponseHistory {
  id          String       @id @default(cuid())
  responseId  String
  response    FormResponse @relation("ResponseHistory", fields: [responseId], references: [id], onDelete: Cascade)
  data        Json // Previous response data
  metadata    Json? // Previous metadata
  status      FormStatus // Previous status
  changedAt   DateTime     @default(now())
  changedById String
  changedBy   User         @relation(fields: [changedById], references: [id])
  changeType  ChangeType // Type of change made
  comments    String? // Optional comments about the change
}

model Department {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  color         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowTasks WorkflowTask[]
  projectTasks  ProjectTask[]
  users         User[]         @relation("UserDepartments")
  formTemplates FormTemplate[]
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         String   @default("system")
  notifications Json     @default("{\"email\":true,\"push\":true,\"taskAssigned\":true,\"taskUpdated\":true,\"taskCompleted\":true}")
  dashboard     Json     @default("{\"defaultView\":\"board\",\"showCompletedTasks\":false,\"taskSortOrder\":\"priority\"}")
  taskView      Json     @default("{\"defaultPriority\":\"MEDIUM\",\"defaultStatus\":\"NOT_STARTED\",\"showDepartmentColors\":true}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
}

enum FormType {
  FORM
  CHECKLIST
  SURVEY
  INSPECTION
}

enum FormFieldType {
  TEXT
  TEXTAREA
  NUMBER
  CHECKBOX
  RADIO
  SELECT
  DATE
  TIME
  DATETIME
  CUSTOM
}

enum FormPriority {
  CRITICAL // Created immediately with project
  STANDARD // Created when phase becomes active
  OPTIONAL // Created on demand
}

enum FormStatus {
  DRAFT
  SUBMITTED
  IN_REVIEW
  APPROVED
  REJECTED
}

enum FormInstanceStatus {
  PENDING      // Not started
  IN_PROGRESS  // Being filled out
  SUBMITTED    // Submitted for review
  APPROVED     // Approved by reviewer
  REJECTED     // Rejected by reviewer
  ON_HOLD      // Temporarily paused
  CANCELLED    // Cancelled/no longer needed
  EXPIRED      // Past due date
}

enum ChangeType {
  CREATED
  UPDATED
  SUBMITTED
  REVIEWED
  APPROVED
  REJECTED
}

// New model for form status history
model FormStatusHistory {
  id           String            @id @default(cuid())
  instanceId   String
  instance     FormInstance      @relation(fields: [instanceId], references: [id])
  status       FormInstanceStatus
  changedById  String
  changedBy    User             @relation(fields: [changedById], references: [id])
  changedAt    DateTime         @default(now())
  reason       String?
  metadata     Json?            // Additional status change metadata
  
  @@index([instanceId])
  @@index([changedById])
}

// New model for form completion requirements
model FormCompletionRequirement {
  id                String        @id @default(cuid())
  templateId        String
  template          FormTemplate  @relation(fields: [templateId], references: [id], onDelete: Cascade)
  phaseId           String
  phase             Phase         @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  isRequired        Boolean       @default(true)
  requiredForPhase  Boolean       @default(false)
  requiredForTask   Boolean       @default(true)
  completionOrder   Int?          // Optional order in which forms should be completed
  dependsOn         FormCompletionRequirement[] @relation("FormDependencies")
  dependentForms    FormCompletionRequirement[] @relation("FormDependencies")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@unique([templateId, phaseId])
}

enum ProjectType {
  VEHICLE_WRAP
  SIGN
  MURAL
}
