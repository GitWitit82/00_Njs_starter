// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  preferences   UserPreference?
  assignedTasks ProjectTask[]
  departments   Department[]    @relation("UserDepartments")
  projects      Project[]       @relation("ProjectManagers")
  submittedForms FormResponse[] @relation("FormSubmissions")
  reviewedForms  FormResponse[] @relation("FormReviews")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Workflow Template Models
model Workflow {
  id          String        @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  phases      Phase[]
  projects    Project[]     // Projects created from this workflow
}

model Phase {
  id            String         @id @default(cuid())
  name          String
  description   String?
  order         Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowId    String
  workflow      Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tasks         WorkflowTask[]
  formTemplates FormTemplate[]
  projectPhases ProjectPhase[] // Instances of this phase in projects
}

model WorkflowTask {
  id           String        @id @default(cuid())
  name         String
  description  String?
  priority     Priority      @default(MEDIUM)
  manHours     Float        @default(1)
  order        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  phaseId      String
  phase        Phase        @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  departmentId String?
  department   Department?  @relation(fields: [departmentId], references: [id])
  projectTasks ProjectTask[] // Instances of this task in projects
}

// Project Implementation Models
model Project {
  id          String        @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  workflowId  String
  workflow    Workflow      @relation(fields: [workflowId], references: [id])
  managerId   String
  manager     User          @relation("ProjectManagers", fields: [managerId], references: [id])
  phases      ProjectPhase[]
}

model ProjectPhase {
  id          String      @id @default(cuid())
  name        String
  description String?
  order       Int
  status      PhaseStatus @default(NOT_STARTED)
  startDate   DateTime?
  endDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId     String
  phase       Phase       @relation(fields: [phaseId], references: [id])
  tasks       ProjectTask[]
}

model ProjectTask {
  id             String         @id @default(cuid())
  name           String
  description    String?
  priority       Priority       @default(MEDIUM)
  status         TaskStatus     @default(NOT_STARTED)
  manHours       Float
  scheduledStart DateTime?
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  order          Int           @default(0)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  projectPhaseId String
  projectPhase   ProjectPhase  @relation(fields: [projectPhaseId], references: [id], onDelete: Cascade)
  departmentId   String?
  department     Department?   @relation(fields: [departmentId], references: [id])
  assignedToId   String?
  assignedTo     User?        @relation(fields: [assignedToId], references: [id])
  workflowTaskId String?
  workflowTask   WorkflowTask? @relation(fields: [workflowTaskId], references: [id])
  dependencies   ProjectTask[] @relation("TaskDependencies")
  dependentOn    ProjectTask[] @relation("TaskDependencies")
  formResponses  FormResponse[]
}

// Form Management Models
model FormTemplate {
  id            String        @id @default(cuid())
  name          String
  description   String?
  type          FormType      @default(FORM)
  departmentId  String?
  department    Department?   @relation(fields: [departmentId], references: [id])
  schema        Json         // Form structure/fields
  layout        Json?        // Optional layout configuration
  style         Json?        // Optional styling configuration
  metadata      Json?        // Additional metadata for custom forms
  order         Int          @default(0)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  phaseId       String
  phase         Phase        @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  responses     FormResponse[]
}

model FormResponse {
  id             String       @id @default(cuid())
  data           Json        // Form response data
  metadata       Json?       // Additional metadata for responses
  status         String      @default("DRAFT") // DRAFT, SUBMITTED, APPROVED, REJECTED
  submittedAt    DateTime?
  submittedById  String?
  submittedBy    User?       @relation("FormSubmissions", fields: [submittedById], references: [id])
  reviewedAt     DateTime?
  reviewedById   String?
  reviewedBy     User?       @relation("FormReviews", fields: [reviewedById], references: [id])
  comments       String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  templateId     String
  template       FormTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  projectTaskId  String
  projectTask    ProjectTask  @relation(fields: [projectTaskId], references: [id], onDelete: Cascade)
}

model Department {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  color         String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  workflowTasks WorkflowTask[]
  projectTasks  ProjectTask[]
  users         User[]         @relation("UserDepartments")
}

model UserPreference {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme         String   @default("system")
  notifications Json     @default("{\"email\":true,\"push\":true,\"taskAssigned\":true,\"taskUpdated\":true,\"taskCompleted\":true}")
  dashboard     Json     @default("{\"defaultView\":\"board\",\"showCompletedTasks\":false,\"taskSortOrder\":\"priority\"}")
  taskView      Json     @default("{\"defaultPriority\":\"MEDIUM\",\"defaultStatus\":\"NOT_STARTED\",\"showDepartmentColors\":true}")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  BLOCKED
}

enum FormType {
  CHECKLIST
  FORM
  CUSTOM
}

enum FormFieldType {
  TEXT
  TEXTAREA
  NUMBER
  CHECKBOX
  RADIO
  SELECT
  DATE
  TIME
  DATETIME
  CUSTOM
}
